{"remainingRequest":"/Users/Diallo/Documents/GitHub/DrexelSailing/node_modules/babel-loader/lib/index.js!/Users/Diallo/Documents/GitHub/DrexelSailing/node_modules/eslint-loader/index.js??ref--13-0!/Users/Diallo/Documents/GitHub/DrexelSailing/src/store/auth.js","dependencies":[{"path":"/Users/Diallo/Documents/GitHub/DrexelSailing/src/store/auth.js","mtime":1548875043984},{"path":"/Users/Diallo/Documents/GitHub/DrexelSailing/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Diallo/Documents/GitHub/DrexelSailing/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Diallo/Documents/GitHub/DrexelSailing/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/Diallo/Documents/GitHub/DrexelSailing/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport firebase from '@/firebase';\nvar state = {\n  user: {},\n  isLoggedIn: false\n};\nvar mutations = {\n  setUser: function setUser(state, user) {\n    if (user) {\n      state.user = user;\n      state.isLoggedIn = true;\n    } else {\n      state.user = {};\n      state.isLoggedIn = false;\n    }\n  }\n};\nvar actions = {\n  login: function () {\n    var _login = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      var provider;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              provider = new firebase.auth.GoogleAuthProvider();\n              _context.next = 3;\n              return firebase.auth().signInWithPopup(provider);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function login() {\n      return _login.apply(this, arguments);\n    }\n\n    return login;\n  }(),\n  logout: function () {\n    var _logout = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee2() {\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return firebase.auth().signOut();\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function logout() {\n      return _logout.apply(this, arguments);\n    }\n\n    return logout;\n  }()\n};\nexport default {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions\n};",{"version":3,"sources":["/Users/Diallo/Documents/GitHub/DrexelSailing/src/store/auth.js"],"names":["firebase","state","user","isLoggedIn","mutations","setUser","actions","login","provider","auth","GoogleAuthProvider","signInWithPopup","logout","signOut","namespaced"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,YAArB;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,IAAI,EAAE,EADM;AAEZC,EAAAA,UAAU,EAAE;AAFA,CAAd;AAKA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,OADgB,mBACRJ,KADQ,EACDC,IADC,EACK;AACnB,QAAIA,IAAJ,EAAU;AACRD,MAAAA,KAAK,CAACC,IAAN,GAAaA,IAAb;AACAD,MAAAA,KAAK,CAACE,UAAN,GAAmB,IAAnB;AACD,KAHD,MAGO;AACLF,MAAAA,KAAK,CAACC,IAAN,GAAa,EAAb;AACAD,MAAAA,KAAK,CAACE,UAAN,GAAmB,KAAnB;AACD;AACF;AATe,CAAlB;AAYA,IAAMG,OAAO,GAAG;AACRC,EAAAA,KADQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAENC,cAAAA,QAFM,GAEK,IAAIR,QAAQ,CAACS,IAAT,CAAcC,kBAAlB,EAFL;AAAA;AAAA,qBAGNV,QAAQ,CAACS,IAAT,GAAgBE,eAAhB,CAAgCH,QAAhC,CAHM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAKRI,EAAAA,MALQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAMNZ,QAAQ,CAACS,IAAT,GAAgBI,OAAhB,EANM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAhB;AAUA,eAAe;AACbC,EAAAA,UAAU,EAAE,IADC;AAEbb,EAAAA,KAAK,EAALA,KAFa;AAGbG,EAAAA,SAAS,EAATA,SAHa;AAIbE,EAAAA,OAAO,EAAPA;AAJa,CAAf","sourcesContent":["import firebase from '@/firebase';\n\nconst state = {\n  user: {},\n  isLoggedIn: false,\n};\n\nconst mutations = {\n  setUser(state, user) {\n    if (user) {\n      state.user = user;\n      state.isLoggedIn = true;\n    } else {\n      state.user = {};\n      state.isLoggedIn = false;\n    }\n  },\n};\n\nconst actions = {\n  async login() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    await firebase.auth().signInWithPopup(provider);\n  },\n  async logout() {\n    await firebase.auth().signOut();\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n};\n"]}]}